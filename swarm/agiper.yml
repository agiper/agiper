version: "3"

networks:
  agiper:
   external: true

services:
  # NGINX
  nginx:
    image: agiper/nginx
    networks:
      - agiper
    ports:
      - "80:80"
    volumes:
      - ~/volume/nginx:/var/lib/nginx
    deploy:
      resources:
        reservations:
          cpus: '0.25'
          memory: 1024M
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: curl -f http://localhost:80 || exit 1

  # SWARM
  swarm:
    image: agiper/swarm
    networks:
      - agiper
    ports:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: curl -f http://localhost:8080 || exit 1

  # GHOST
  ghost:
    image: ghost
    networks:
      - agiper
    ports:
      - "2368"
    volumes: 
      - ~/volume/ghost:/var/lib/ghost
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]
    healthcheck:
      retries: 3
      timeout: 30s
      interval: 5m
      test: curl -f http://localhost:2368

  # DOCKER
  docker:
    image: agiper/docker
    networks:
      - agiper
    ports:
      - "5000"
    volumes:
      - ~/volume/docker:/var/lib/registry
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: curl -f http://localhost:5000 || exit 1

  # TEAMCITY
  teamcity:
    image: agiper/teamcity
    networks:
      - agiper
    ports:
      - "8111"
    volumes:
      - ~/volume/teamcity:/var/lib/teamcity
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: curl -f http://localhost:8111 || exit 1